diff --git a/node_modules/nekobot-api/dist/src/ImageEndpoint.d.ts b/node_modules/nekobot-api/dist/src/ImageEndpoint.d.ts
index 25a42ab..0844722 100644
--- a/node_modules/nekobot-api/dist/src/ImageEndpoint.d.ts
+++ b/node_modules/nekobot-api/dist/src/ImageEndpoint.d.ts
@@ -10,8 +10,8 @@ declare class ImageEndpoint {
     constructor(client: NekoBot);
     /**
      * @param {ImageEndpointType} type - The type of image to get. Current types: hass, hmidriff, pgif, 4k, hentai, holo, hneko, neko, hkitsune, kemonomimi, anal, hanal, gonewild, kanna, ass, pussy, thigh, hthigh, gah, coffee, food
-     * @returns {(Promise<String | void>)} Image URL
+     * @returns {(Promise<string | void>)} Image URL
      */
-    getImage(type: ImageEndpointType): Promise<String | void>;
+    getImage(type: ImageEndpointType): Promise<string | void>;
 }
 export { ImageEndpoint, ImageEndpointType };
diff --git a/node_modules/nekobot-api/dist/src/ImageGeneration.d.ts b/node_modules/nekobot-api/dist/src/ImageGeneration.d.ts
index 8225846..f50ea1e 100644
--- a/node_modules/nekobot-api/dist/src/ImageGeneration.d.ts
+++ b/node_modules/nekobot-api/dist/src/ImageGeneration.d.ts
@@ -9,146 +9,146 @@ declare class ImageGeneration {
     constructor(client: NekoBot);
     /**
      * Threats Image
-     * @param {String} url - Image URL to add to template.
-     * @returns {(Promise<String | void>)} The image URL
+     * @param {string} url - Image URL to add to template.
+     * @returns {(Promise<string | void>)} The image URL
      */
-    threats(url: String): Promise<String | void>;
+    threats(url: string): Promise<string | void>;
     /**
      * Baguette Image
-     * @param {String} url - Any image URL to generate, can be user avatar or anything.
-     * @returns {(Promise<String | void>)} The image URL
+     * @param {string} url - Any image URL to generate, can be user avatar or anything.
+     * @returns {(Promise<string | void>)} The image URL
      */
-    baguette(url: String): Promise<String | void>;
+    baguette(url: string): Promise<string | void>;
     /**
      * Clyde Image
-     * @param {String} text - Text to clydify.
-     * @returns {(Promise<String | void>)} The image URL
+     * @param {string} text - Text to clydify.
+     * @returns {(Promise<string | void>)} The image URL
      */
-    clyde(text: String): Promise<String | void>;
+    clyde(text: string): Promise<string | void>;
     /**
      * Ship Image
-     * @param {String} user1 - User 1’s avatar
-     * @param {String} user2 - User 2’s avatar
-     * @returns {(Promise<String | void>)} The image URL
+     * @param {string} user1 - User 1’s avatar
+     * @param {string} user2 - User 2’s avatar
+     * @returns {(Promise<string | void>)} The image URL
      */
-    ship(user1: String, user2: String): Promise<String | void>;
+    ship(user1: string, user2: string): Promise<string | void>;
     /**
      * Captcha Image
-     * @param {String} url - User’s avatar URL or any image.
-     * @param {String} username - User’s username or or any other string to show up.
-     * @returns {(Promise<String | void>)} The image URL
+     * @param {string} url - User’s avatar URL or any image.
+     * @param {string} username - User’s username or or any other string to show up.
+     * @returns {(Promise<string | void>)} The image URL
      */
-    captcha(url: String, username: String): Promise<String | void>;
+    captcha(url: string, username: string): Promise<string | void>;
     /**
      * WhoWouldWin Image
-     * @param {String} user1 - User 1’s avatar
-     * @param {String} user2 - User 2’s avatar
-     * @returns {(Promise<String | void>)} The image URL
+     * @param {string} user1 - User 1’s avatar
+     * @param {string} user2 - User 2’s avatar
+     * @returns {(Promise<string | void>)} The image URL
      */
-    whoWouldWin(user1: String, user2: String): Promise<String | void>;
+    whoWouldWin(user1: string, user2: string): Promise<string | void>;
     /**
      * ChangeMyMind Image
-     * @param {String} text - Change my mind text.
-     * @returns {(Promise<String | void>)} The image URL
+     * @param {string} text - Change my mind text.
+     * @returns {(Promise<string | void>)} The image URL
      */
-    changemMyMind(text: String): Promise<String | void>;
+    changemMyMind(text: string): Promise<string | void>;
     /**
      * DDLC Image
-     * @param {String} character - Can be either monika, yuri, natsuki, sayori or m, y, n, s
-     * @param {String} background - Background of the image, types: bedroom, class, closet, club, corridor, house, kitchen, residential, sayori_bedroom
-     * @param {String} body - Body of the character, there is only 1 or 2 for monika and 1, 1b, 2, 2b for the rest
-     * @param {String} face - Face of the character to go with the body, is best to just see all the types at https://github.com/ReKTDevlol/NekoBot/blob/master/modules/fun.py#L14 (line14 to 34)
-     * @param {String} text - Text for the character to say, max length of 140
-     * @returns {(Promise<String | void>)} The image URL
+     * @param {string} character - Can be either monika, yuri, natsuki, sayori or m, y, n, s
+     * @param {string} background - Background of the image, types: bedroom, class, closet, club, corridor, house, kitchen, residential, sayori_bedroom
+     * @param {string} body - Body of the character, there is only 1 or 2 for monika and 1, 1b, 2, 2b for the rest
+     * @param {string} face - Face of the character to go with the body, is best to just see all the types at https://github.com/ReKTDevlol/NekoBot/blob/master/modules/fun.py#L14 (line14 to 34)
+     * @param {string} text - Text for the character to say, max length of 140
+     * @returns {(Promise<string | void>)} The image URL
      */
-    ddlc(character: String, background: String, body: String, face: String, text: String): Promise<String | void>;
+    ddlc(character: string, background: string, body: string, face: string, text: string): Promise<string | void>;
     /**
      * JPEG Image
-     * @param {String} url - URL to JPEGify, would be recommended if the URL is as an JPEG or JPG format but PNG will still work :^)
-     * @returns {(Promise<String | void>)} The image URL
+     * @param {string} url - URL to JPEGify, would be recommended if the URL is as an JPEG or JPG format but PNG will still work :^)
+     * @returns {(Promise<string | void>)} The image URL
      */
-    jpeg(url: String): Promise<String | void>;
+    jpeg(url: string): Promise<string | void>;
     /**
      * Lolice Image
-     * @param {String} url - Lolice chief
-     * @returns {(Promise<String | void>)} The image URL
+     * @param {string} url - Lolice chief
+     * @returns {(Promise<string | void>)} The image URL
      */
-    lolice(url: String): Promise<String | void>;
+    lolice(url: string): Promise<string | void>;
     /**
      * Kannagen Image
-     * @param {String} text - text to kannafy
-     * @returns {(Promise<String | void>)} The image URL
+     * @param {string} text - text to kannafy
+     * @returns {(Promise<string | void>)} The image URL
      */
-    kannagen(text: String): Promise<String | void>;
+    kannagen(text: string): Promise<string | void>;
     /**
      * IPhoneX Image
-     * @param {String} url - Image to fill into an iphone.
-     * @returns {(Promise<String | void>)} The image URL
+     * @param {string} url - Image to fill into an iphone.
+     * @returns {(Promise<string | void>)} The image URL
      */
-    iphoneX(url: String): Promise<String | void>;
+    iphoneX(url: string): Promise<string | void>;
     /**
      * AnimeFace Image
-     * @param {String} image - Image to find heccin weaboos
-     * @returns {(Promise<String | void>)} The image URL
+     * @param {string} image - Image to find heccin weaboos
+     * @returns {(Promise<string | void>)} The image URL
      */
-    animeFace(image: String): Promise<String | void>;
+    animeFace(image: string): Promise<string | void>;
     /**
      * Awooify Image
-     * @param {String} url - Users avatar to AwOOOOify :3
-     * @returns {(Promise<String | void>)} The image URL
+     * @param {string} url - Users avatar to AwOOOOify :3
+     * @returns {(Promise<string | void>)} The image URL
      */
-    awooify(url: String): Promise<String | void>;
+    awooify(url: string): Promise<string | void>;
     /**
      * TrumpTweet Image
-     * @param {String} text - Text to TrumpTweet
-     * @returns {(Promise<String | void>)} The image URL
+     * @param {string} text - Text to TrumpTweet
+     * @returns {(Promise<string | void>)} The image URL
      */
-    trumpTweet(text: String): Promise<String | void>;
+    trumpTweet(text: string): Promise<string | void>;
     /**
      * Tweet Image
-     * @param {String} username - Twitter Username without the @
-     * @param {String} text - Text to Tweet
-     * @returns {(Promise<String | void>)} The image URL
+     * @param {string} username - Twitter Username without the @
+     * @param {string} text - Text to Tweet
+     * @returns {(Promise<string | void>)} The image URL
      */
-    tweet(username: String, text: String): Promise<String | void>;
+    tweet(username: string, text: string): Promise<string | void>;
     /**
      * DeepFry Image
-     * @param {String} image - Image URL to DeepFry.
-     * @returns {(Promise<String | void>)} The image URL
+     * @param {string} image - Image URL to DeepFry.
+     * @returns {(Promise<string | void>)} The image URL
      */
-    deepFry(image: String): Promise<String | void>;
+    deepFry(image: string): Promise<string | void>;
     /**
      * Blurpify Image
-     * @param {String} image - Image URL to Blurpify.
-     * @returns {(Promise<String | void>)} The image URL
+     * @param {string} image - Image URL to Blurpify.
+     * @returns {(Promise<string | void>)} The image URL
      */
-    blurpify(image: String): Promise<String | void>;
+    blurpify(image: string): Promise<string | void>;
     /**
      * PHComment Image
-     * @param {String} image - Users Image
-     * @param {String} text - Text to comment.
-     * @param {String} username - User's Username.
-     * @returns {(Promise<String | void>)} The image URL
+     * @param {string} image - Users Image
+     * @param {string} text - Text to comment.
+     * @param {string} username - User's Username.
+     * @returns {(Promise<string | void>)} The image URL
      */
-    phComment(image: String, text: String, username: String): Promise<String | void>;
+    phComment(image: string, text: string, username: string): Promise<string | void>;
     /**
      * Magik Image
-     * @param {String} image - Image to magikify
+     * @param {string} image - Image to magikify
      * @param {Number} [intensity] - an integer of magik intensity from 0 to 10
-     * @returns {(Promise<String | void>)} The image URL
+     * @returns {(Promise<string | void>)} The image URL
      */
-    magik(image: String, intensity?: Number): Promise<String | void>;
+    magik(image: string, intensity?: Number): Promise<string | void>;
     /**
      * Fact Image
-     * @param {String} text - No description provided..
-     * @returns {(Promise<String | void>)} The image URL
+     * @param {string} text - No description provided..
+     * @returns {(Promise<string | void>)} The image URL
      */
-    fact(text: String): Promise<String | void>;
+    fact(text: string): Promise<string | void>;
     /**
      * Trash Image
-     * @param {String} url - URL of trash waifu
-     * @returns {(Promise<String | void>)} The image URL
+     * @param {string} url - URL of trash waifu
+     * @returns {(Promise<string | void>)} The image URL
      */
-    trash(url: String): Promise<String | void>;
+    trash(url: string): Promise<string | void>;
 }
 export { ImageGeneration };
diff --git a/node_modules/nekobot-api/dist/src/ImageGeneration.js b/node_modules/nekobot-api/dist/src/ImageGeneration.js
index 8f88899..17ec3d1 100644
--- a/node_modules/nekobot-api/dist/src/ImageGeneration.js
+++ b/node_modules/nekobot-api/dist/src/ImageGeneration.js
@@ -167,7 +167,7 @@ class ImageGeneration {
      * @param {String} text - Change my mind text.
      * @returns {(Promise<String | void>)} The image URL
      */
-    changemMyMind(text) {
+    changeMyMind(text) {
         return __awaiter(this, void 0, void 0, function* () {
             try {
                 const { body } = yield this.client.request
diff --git a/node_modules/nekobot-api/dist/src/NekoBot.d.ts b/node_modules/nekobot-api/dist/src/NekoBot.d.ts
index fabd1bb..9c3bddf 100644
--- a/node_modules/nekobot-api/dist/src/NekoBot.d.ts
+++ b/node_modules/nekobot-api/dist/src/NekoBot.d.ts
@@ -6,8 +6,8 @@ import { ImageGeneration } from "./ImageGeneration";
  * @class NekoBot
  */
 declare class NekoBot {
-    version: String;
-    baseURL: String;
+    version: string;
+    baseURL: string;
     request: request.SuperAgentStatic;
     constructor();
     /**
